{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "544dac13-a95c-470e-98ea-5b75c941c5a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import asyncio\n",
    "import pygame\n",
    "import random\n",
    "\n",
    "# Constants for window size\n",
    "SCREEN_WIDTH = 960\n",
    "SCREEN_HEIGHT = 720\n",
    "\n",
    "# Colors (RGB tuples)\n",
    "COLOR_BLACK = (0, 0, 0)\n",
    "COLOR_WHITE = (255, 255, 255)\n",
    "\n",
    "# Speed control constants\n",
    "SPEED_INCREMENT = 0.02  # Speed increase after each paddle hit\n",
    "MAX_SPEED = 0.3         # Maximum speed for ball's velocity\n",
    "\n",
    "def increase_speed(ball_accel, increment, max_speed):\n",
    "    sign = 1 if ball_accel > 0 else -1\n",
    "    new_speed = min(abs(ball_accel) + increment, max_speed)\n",
    "    return sign * new_speed\n",
    "\n",
    "def main():\n",
    "    pygame.init()\n",
    "    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n",
    "    pygame.display.set_caption(\"Pong - Increasing Speed Mode\")\n",
    "    clock = pygame.time.Clock()\n",
    "\n",
    "    # Create player paddles\n",
    "    paddle_1_rect = pygame.Rect(30, SCREEN_HEIGHT // 2 - 50, 7, 100)\n",
    "    paddle_2_rect = pygame.Rect(SCREEN_WIDTH - 50, SCREEN_HEIGHT // 2 - 50, 7, 100)\n",
    "\n",
    "    paddle_1_move = 0\n",
    "    paddle_2_move = 0\n",
    "\n",
    "    # Create ball\n",
    "    ball_rect = pygame.Rect(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2, 25, 25)\n",
    "\n",
    "    # Initial ball speeds (easy mode - slower start)\n",
    "    ball_accel_x = random.choice([-1, 1]) * random.uniform(0.05, 0.1)\n",
    "    ball_accel_y = random.choice([-1, 1]) * random.uniform(0.05, 0.1)\n",
    "\n",
    "    started = False\n",
    "\n",
    "    # Only allow essential events for better performance\n",
    "    pygame.event.set_allowed([pygame.QUIT, pygame.KEYDOWN, pygame.KEYUP])\n",
    "\n",
    "    while True:\n",
    "        screen.fill(COLOR_BLACK)\n",
    "\n",
    "        if not started:\n",
    "            font = pygame.font.SysFont('Consolas', 30)\n",
    "            text = font.render('Press Space to Start', True, COLOR_WHITE)\n",
    "            text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n",
    "            screen.blit(text, text_rect)\n",
    "            pygame.display.flip()\n",
    "            clock.tick(30)  # 30 FPS while waiting\n",
    "            for event in pygame.event.get():\n",
    "                if event.type == pygame.QUIT:\n",
    "                    pygame.quit()\n",
    "                    return\n",
    "                elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:\n",
    "                    started = True\n",
    "            continue\n",
    "\n",
    "        delta_time = clock.tick(30)  # 30 FPS for easy mode stability\n",
    "\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                return\n",
    "            elif event.type == pygame.KEYDOWN:\n",
    "                if event.key == pygame.K_w:\n",
    "                    paddle_1_move = -0.3\n",
    "                elif event.key == pygame.K_s:\n",
    "                    paddle_1_move = 0.3\n",
    "                elif event.key == pygame.K_UP:\n",
    "                    paddle_2_move = -0.3\n",
    "                elif event.key == pygame.K_DOWN:\n",
    "                    paddle_2_move = 0.3\n",
    "            elif event.type == pygame.KEYUP:\n",
    "                if event.key in (pygame.K_w, pygame.K_s):\n",
    "                    paddle_1_move = 0\n",
    "                elif event.key in (pygame.K_UP, pygame.K_DOWN):\n",
    "                    paddle_2_move = 0\n",
    "\n",
    "        # Move paddles scaled by delta_time\n",
    "        paddle_1_rect.y += paddle_1_move * delta_time\n",
    "        paddle_2_rect.y += paddle_2_move * delta_time\n",
    "\n",
    "        # Clamp paddles inside screen bounds\n",
    "        if paddle_1_rect.top < 0:\n",
    "            paddle_1_rect.top = 0\n",
    "        if paddle_1_rect.bottom > SCREEN_HEIGHT:\n",
    "            paddle_1_rect.bottom = SCREEN_HEIGHT\n",
    "\n",
    "        if paddle_2_rect.top < 0:\n",
    "            paddle_2_rect.top = 0\n",
    "        if paddle_2_rect.bottom > SCREEN_HEIGHT:\n",
    "            paddle_2_rect.bottom = SCREEN_HEIGHT\n",
    "\n",
    "        # Check ball out of bounds â€“ Game Over\n",
    "        if ball_rect.left <= 0 or ball_rect.right >= SCREEN_WIDTH:\n",
    "            font = pygame.font.SysFont('Consolas', 40)\n",
    "            msg = font.render('Game Over! Press Esc to Exit', True, COLOR_WHITE)\n",
    "            msg_rect = msg.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))\n",
    "            screen.blit(msg, msg_rect)\n",
    "            pygame.display.flip()\n",
    "\n",
    "            # Wait for exit input\n",
    "            waiting = True\n",
    "            while waiting:\n",
    "                for event in pygame.event.get():\n",
    "                    if event.type == pygame.QUIT:\n",
    "                        pygame.quit()\n",
    "                        return\n",
    "                    elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n",
    "                        pygame.quit()\n",
    "                        return\n",
    "                clock.tick(30)\n",
    "            break\n",
    "\n",
    "        # Ball collision with top and bottom walls\n",
    "        if ball_rect.top <= 0:\n",
    "            ball_accel_y = abs(ball_accel_y)\n",
    "            ball_rect.top = 0\n",
    "        if ball_rect.bottom >= SCREEN_HEIGHT:\n",
    "            ball_accel_y = -abs(ball_accel_y)\n",
    "            ball_rect.bottom = SCREEN_HEIGHT\n",
    "\n",
    "        # Ball collision with paddles with speed increase\n",
    "        if paddle_1_rect.colliderect(ball_rect) and ball_accel_x < 0:\n",
    "            ball_accel_x = abs(ball_accel_x)\n",
    "            ball_accel_x = increase_speed(ball_accel_x, SPEED_INCREMENT, MAX_SPEED)\n",
    "            ball_accel_y = increase_speed(ball_accel_y, SPEED_INCREMENT, MAX_SPEED)\n",
    "            ball_rect.left = paddle_1_rect.right + 1\n",
    "\n",
    "        if paddle_2_rect.colliderect(ball_rect) and ball_accel_x > 0:\n",
    "            ball_accel_x = -abs(ball_accel_x)\n",
    "            ball_accel_x = increase_speed(ball_accel_x, SPEED_INCREMENT, MAX_SPEED)\n",
    "            ball_accel_y = increase_speed(ball_accel_y, SPEED_INCREMENT, MAX_SPEED)\n",
    "            ball_rect.right = paddle_2_rect.left - 1\n",
    "\n",
    "        # Move ball by its velocity scaled by delta_time\n",
    "        ball_rect.x += ball_accel_x * delta_time\n",
    "        ball_rect.y += ball_accel_y * delta_time\n",
    "\n",
    "        # Draw paddles and ball\n",
    "        pygame.draw.rect(screen, COLOR_WHITE, paddle_1_rect)\n",
    "        pygame.draw.rect(screen, COLOR_WHITE, paddle_2_rect)\n",
    "        pygame.draw.rect(screen, COLOR_WHITE, ball_rect)\n",
    "\n",
    "        pygame.display.flip()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "605c3135-2eae-40ad-bb66-0461768a7b1f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d9c91de-d3fa-4d42-9b11-7e0c70d13c42",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
